#include<Windows.h>
#include<stdio.h>


const char *k = "[+]";
const char *e = "[-]";
const char *i = "[*]";


DWORD PID =NULL; //Unsign interger 32-bit
HANDLE hProcess, hThread = NULL; 
LPVOID rBuffer = NULL; //void far(Data Type): beyound 64kb storage (Default) far indicated that the pointer should to use the segment or offset to access the memory.

unsigned char payloads[] = "\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41";

int main(int argc, char *argv[]){
    //argc -> argument count (Command Line)
    //argv -> argument vector, receive user input parameter form (Command Line)

    //*Check User's parameter*
    if(argc < 2){  
        //argv[0] -> programe name 
        //argv[1] -> PID 
        printf("%s Usage: program.exe <PID>",e);  
        return EXIT_FAILURE;

    }

    //*Recive user input asign to PID variable*
    PID = atoi(argv[1]); // input:string , "ASCII to Integer" String to interger 
    printf("%s Open a handle to process (%ld)\n",i,PID); //ld (long int-decimal)


    //*Process Hanlder, open the handle to process* 

    // HANDLE OpenProcess
    //   [in] DWORD dwDesiredAccess, //Procss Access Rights  
    //   [in] BOOL  bInheritHandle, // inheritHandle From the parant process 
    //   [in] DWORD dwProcessId
    // );
    hProcess = OpenProcess(
        PROCESS_ALL_ACCESS, 
        FALSE,
        PID
    );

    //*Check Open handle Error* 
    if (hProcess==NULL){
        printf("%s Can't not to opent the handler to the process (%ld) error: %ld", e, PID, GetLastError());
        // Retrived and calling the threads last Error code value -> System Error Code 
        return EXIT_FAILURE; 
    }else {
        printf("%s Got the handle to process\n\\---0x%p\n ",k,hProcess);
    }

    //*Allocate the memory to process*

    // LPVOID VirtualAllocEx(
    //   [in]           HANDLE hProcess,  //Specify Process 
    //   [in, optional] LPVOID lpAddress,
    //   [in]           SIZE_T dwSize,
    //   [in]           DWORD  flAllocationType,
    //   [in]           DWORD  flProtect
    // );

    rBuffer = VirtualAllocEx(
        hProcess,
        NULL,
        sizeof(payloads),
        (MEM_COMMIT | MEM_RESERVE),
        PAGE_EXECUTE_READWRITE
    );
    printf("%s Allocate %zu-Byptes with PAGE_EXECUTE_READWRITE Permission within process", k, sizeof(payloads));

    return EXIT_SUCCESS;
}
