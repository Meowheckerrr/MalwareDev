#include <windows.h>
#include <stdio.h>

//Syntax
// BOOL CreateProcessW(
//   [in, optional]      LPCWSTR               lpApplicationName,
//   [in, out, optional] LPWSTR                lpCommandLine,
//   [in, optional]      LPSECURITY_ATTRIBUTES lpProcessAttributes,
//   [in, optional]      LPSECURITY_ATTRIBUTES lpThreadAttributes,
//   [in]                BOOL                  bInheritHandles,   (If this parameter is TRUE, each inheritable handle in the calling process is inherited by the new process
//   [in]                DWORD                 dwCreationFlags,   (The flags is control new process's priority)
//   [in, optional]      LPVOID                lpEnvironment,     (A pointer to the environment block for the new process )
//   [in, optional]      LPCWSTR               lpCurrentDirectory, (The full path to the current directory for the process)
//   [in]                LPSTARTUPINFOW        lpStartupInfo,      (Setting Process star up infomration )
//   [out]               LPPROCESS_INFORMATION lpProcessInformation
// );

//C:\Users\Meowhecker\AppData\Local\Microsoft\WindowsApps\firefox.exe

// Specifies the window station, desktop, standard handles, and appearance of the main window for a process at creation time.
// typedef struct _STARTUPINFOW {
//   DWORD  cb;
//   LPWSTR lpReserved;
//   LPWSTR lpDesktop;
//   LPWSTR lpTitle;
//   DWORD  dwX;
//   DWORD  dwY;
//   DWORD  dwXSize;
//   DWORD  dwYSize;
//   DWORD  dwXCountChars;
//   DWORD  dwYCountChars;
//   DWORD  dwFillAttribute;
//   DWORD  dwFlags;
//   WORD   wShowWindow;
//   WORD   cbReserved2;
//   LPBYTE lpReserved2;
//   HANDLE hStdInput;
//   HANDLE hStdOutput;
//   HANDLE hStdError;
// } STARTUPINFOW, *LPSTARTUPINFOW;

//Contain information abount newly create process and primary thread
// typedef struct _PROCESS_INFORMATION {
//   HANDLE hProcess;
//   HANDLE hThread;
//   DWORD  dwProcessId;
//   DWORD  dwThreadId;
// } PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;



int main(void){
//#pragma comment(lib, "user32.lib")
    
// Initializing avoid the trash value
STARTUPINFOW si = {0};//starup information (pointer)
PROCESS_INFORMATION pi = {0}; //Process INFO (pointer)

    if(!CreateProcessW(
        L"C:\\Windows\\system32\\calc.exe", //Applicaiton Path/Name 
        NULL, //Command Line args 
        NULL,
        NULL,
        FALSE,
        0,//BELOW_NORMAL_PRIORITY_CLASS, //For POC 
        NULL,
        NULL,
        &si,
        &pi
    )){
        printf("(-) Fail to create the process, error: %ld", GetLastError()); //GetLastError return Retrieves the calling thread's last-error code value
        return EXIT_FAILURE;
    }
    printf("(+) Creating Process successfuly, PID: %ld", pi.dwProcessId);
    return EXIT_SUCCESS;
}